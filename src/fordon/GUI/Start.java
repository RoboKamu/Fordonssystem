package fordon.GUI;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Pattern;
import javax.swing.*;
import java.util.Random;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import fordon.Klasser.Fordon;
import fordon.Klasser.Kund;
import fordon.Klasser.Reparation;
import fordon.Klasser.kommunala.Buss;
import fordon.Klasser.Motorcyckel;
import fordon.Klasser.privata.PersonBil;
import java.io.File;


/**
 *
 * @author karzan.murad
 */
public class Start extends javax.swing.JFrame{
    Random rand = new Random();
    String basePath = System.getProperty("user.dir");   // hämta projektens path
    // PATH för filen kunder.txt
    //String KundFilePath = "C:\\Users\\karzan.murad\\Documents\\NetBeansProjects\\SLUTUPPGIFT\\src\\slutuppgift\\Data\\kunder";
    String KundFilePath = basePath + File.separator + "Data" + File.separator + "kunder.txt";
    // PATH för filen fordon.txt
    //String FordonFilePath = "C:\\Users\\karzan.murad\\Documents\\NetBeansProjects\\SLUTUPPGIFT\\src\\slutuppgift\\Data\\fordon";        
    String FordonFilePath = basePath + File.separator + "Data" + File.separator + "fordon.txt";
    // PATH för filen reparationer.txt
    //String RepFilePath = "C:\\Users\\karzan.murad\\Documents\\NetBeansProjects\\SLUTUPPGIFT\\src\\slutuppgift\\Data\\reparationer";
    String RepFilePath = basePath + File.separator + "Data" + File.separator + "reparationer.txt";
    

    // Define the relative data file paths
    
    // skapa en lista med alla kunder (objekt)
    ArrayList<Kund> customers = new ArrayList<>();
    ArrayList<Fordon> vehicles = new ArrayList<>();
    
    public Start() {
        initComponents();
    }

        /**
     * This method is called fReaderom within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        emailField1 = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel18 = new javax.swing.JLabel();
        mainPanelTab = new javax.swing.JTabbedPane();
        signInPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        signInButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        noAccButton = new javax.swing.JButton();
        emailLoginField = new javax.swing.JTextField();
        passwordLoginField = new javax.swing.JPasswordField();
        jLabel24 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        regUserPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        firstNameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        adressField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        postNumField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        teleNumField = new javax.swing.JTextField();
        regButton = new javax.swing.JButton();
        cancelRegButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jPanel5 = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        accountButton = new javax.swing.JButton();
        myVechicleButton = new javax.swing.JButton();
        myRepairButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        homeTabNav = new javax.swing.JTabbedPane();
        acountTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountTextArea = new javax.swing.JTextArea();
        myVehicleTab = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        userVehiclesField = new javax.swing.JTextArea();
        myRepairTab = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        userRepairField = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        adminPanel = new javax.swing.JPanel();
        newVehicleButton = new javax.swing.JButton();
        customersButton = new javax.swing.JButton();
        repairLogButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        logoutAdminButton = new javax.swing.JButton();
        vechicleDisplay = new javax.swing.JButton();
        vechicleDisplay1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        adminPanelNav = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerInfo = new javax.swing.JTextArea();
        searchFieldCust = new javax.swing.JTextField();
        searchCustButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        ownerField = new javax.swing.JTextField();
        regPlateField = new javax.swing.JTextField();
        maxPassField = new javax.swing.JTextField();
        wheelsField = new javax.swing.JTextField();
        priceOGField = new javax.swing.JTextField();
        registerVehicleButton = new javax.swing.JButton();
        vehicleTypeChoice = new javax.swing.JComboBox<>();
        adressLabel = new javax.swing.JLabel();
        volumeLabel = new javax.swing.JLabel();
        kommunLabel = new javax.swing.JLabel();
        vehicleAdressField = new javax.swing.JTextField();
        kommunField = new javax.swing.JTextField();
        volumeField = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        dateField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        mailField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        regplateField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        descField = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        vehicleField = new javax.swing.JTextArea();
        searchVehicleField = new javax.swing.JTextField();
        vehicleSearchButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        regPlateNameField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        reparationField = new javax.swing.JTextArea();
        jLabel25 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        currentOwner = new javax.swing.JTextField();
        newOwner = new javax.swing.JTextField();
        configure = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        regPlateReplace = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        emailField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailField1ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane7.setViewportView(jList1);

        jLabel18.setText("jLabel18");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Password");

        signInButton.setText("Sign in");
        signInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("No account?");

        jLabel9.setText("Email");
        jLabel9.setMaximumSize(new java.awt.Dimension(28, 16));
        jLabel9.setMinimumSize(new java.awt.Dimension(28, 16));
        jLabel9.setPreferredSize(new java.awt.Dimension(28, 16));

        noAccButton.setText("Register ");
        noAccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noAccButtonActionPerformed(evt);
            }
        });

        emailLoginField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailLoginFieldActionPerformed(evt);
            }
        });

        passwordLoginField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordLoginFieldActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 204, 51));
        jLabel24.setText("Welcome");

        javax.swing.GroupLayout signInPanelLayout = new javax.swing.GroupLayout(signInPanel);
        signInPanel.setLayout(signInPanelLayout);
        signInPanelLayout.setHorizontalGroup(
            signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signInPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addGroup(signInPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailLoginField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(signInPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordLoginField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(signInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(signInPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noAccButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        signInPanelLayout.setVerticalGroup(
            signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signInPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(26, 26, 26)
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLoginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(passwordLoginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(signInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(signInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noAccButton))
                .addGap(58, 58, 58))
        );

        mainPanelTab.addTab("tab1", signInPanel);

        regUserPanel.setName("RegPanel"); // NOI18N

        jLabel3.setText("First name");

        jLabel7.setText("Email");

        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });

        firstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Last name");

        lastNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Adress");

        adressField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adressFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("Post nummer");

        postNumField.setText("00000");
        postNumField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postNumFieldActionPerformed(evt);
            }
        });

        jLabel10.setText("telefonnumer");

        teleNumField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teleNumFieldActionPerformed(evt);
            }
        });

        regButton.setText("Register ");
        regButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regButtonActionPerformed(evt);
            }
        });

        cancelRegButton.setText("Cancel");
        cancelRegButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRegButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("Password");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout regUserPanelLayout = new javax.swing.GroupLayout(regUserPanel);
        regUserPanel.setLayout(regUserPanelLayout);
        regUserPanelLayout.setHorizontalGroup(
            regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regUserPanelLayout.createSequentialGroup()
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10)
                        .addGroup(regUserPanelLayout.createSequentialGroup()
                            .addGap(43, 43, 43)
                            .addComponent(jLabel7))
                        .addGroup(regUserPanelLayout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jLabel5))
                        .addComponent(jLabel6)
                        .addGroup(regUserPanelLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jLabel4))
                        .addGroup(regUserPanelLayout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(jLabel3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(regUserPanelLayout.createSequentialGroup()
                        .addComponent(regButton, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                        .addGap(58, 58, 58)
                        .addComponent(cancelRegButton)
                        .addGap(48, 48, 48))
                    .addComponent(passwordField)
                    .addComponent(lastNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(firstNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(postNumField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(adressField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(teleNumField, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        regUserPanelLayout.setVerticalGroup(
            regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regUserPanelLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(adressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(postNumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(teleNumField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelRegButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(regUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanelTab.addTab("tab2", jPanel3);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        accountButton.setText("Account");
        accountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountButtonActionPerformed(evt);
            }
        });
        homePanel.add(accountButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 77, 115, 45));

        myVechicleButton.setText("My Vehicles");
        myVechicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myVechicleButtonActionPerformed(evt);
            }
        });
        homePanel.add(myVechicleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 134, 115, 43));

        myRepairButton.setText("My Repair");
        myRepairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myRepairButtonActionPerformed(evt);
            }
        });
        homePanel.add(myRepairButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 189, 115, 45));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Home");
        homePanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 14, 115, 45));

        logoutButton.setBackground(new java.awt.Color(153, 0, 51));
        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        homePanel.add(logoutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 246, 115, 43));

        accountTextArea.setEditable(false);
        accountTextArea.setColumns(20);
        accountTextArea.setRows(5);
        jScrollPane1.setViewportView(accountTextArea);

        javax.swing.GroupLayout acountTabLayout = new javax.swing.GroupLayout(acountTab);
        acountTab.setLayout(acountTabLayout);
        acountTabLayout.setHorizontalGroup(
            acountTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(acountTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        acountTabLayout.setVerticalGroup(
            acountTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, acountTabLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        homeTabNav.addTab("tab1", acountTab);

        userVehiclesField.setEditable(false);
        userVehiclesField.setColumns(20);
        userVehiclesField.setRows(5);
        jScrollPane5.setViewportView(userVehiclesField);

        javax.swing.GroupLayout myVehicleTabLayout = new javax.swing.GroupLayout(myVehicleTab);
        myVehicleTab.setLayout(myVehicleTabLayout);
        myVehicleTabLayout.setHorizontalGroup(
            myVehicleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myVehicleTabLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        myVehicleTabLayout.setVerticalGroup(
            myVehicleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myVehicleTabLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        homeTabNav.addTab("tab2", myVehicleTab);

        userRepairField.setEditable(false);
        userRepairField.setColumns(20);
        userRepairField.setRows(5);
        jScrollPane6.setViewportView(userRepairField);

        javax.swing.GroupLayout myRepairTabLayout = new javax.swing.GroupLayout(myRepairTab);
        myRepairTab.setLayout(myRepairTabLayout);
        myRepairTabLayout.setHorizontalGroup(
            myRepairTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myRepairTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        myRepairTabLayout.setVerticalGroup(
            myRepairTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myRepairTabLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        homeTabNav.addTab("tab3", myRepairTab);

        homePanel.add(homeTabNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(133, -86, -1, 390));

        jPanel5.add(homePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 15, 520, -1));

        mainPanelTab.addTab("tab3", jPanel5);

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        newVehicleButton.setText("Register New Vehicle");
        newVehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newVehicleButtonActionPerformed(evt);
            }
        });

        customersButton.setText("Customers");
        customersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersButtonActionPerformed(evt);
            }
        });

        repairLogButton.setText("Repair Logg");
        repairLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repairLogButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 102, 255));
        jLabel11.setText("Admin");

        logoutAdminButton.setBackground(new java.awt.Color(153, 0, 51));
        logoutAdminButton.setText("Logout");
        logoutAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutAdminButtonActionPerformed(evt);
            }
        });

        vechicleDisplay.setText("All Vehicles");
        vechicleDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vechicleDisplayActionPerformed(evt);
            }
        });

        vechicleDisplay1.setText("update warranty");
        vechicleDisplay1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vechicleDisplay1ActionPerformed(evt);
            }
        });

        jButton2.setText("edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminPanelLayout = new javax.swing.GroupLayout(adminPanel);
        adminPanel.setLayout(adminPanelLayout);
        adminPanelLayout.setHorizontalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutAdminButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(adminPanelLayout.createSequentialGroup()
                        .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(adminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(5, 5, 5))
                            .addComponent(vechicleDisplay1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newVehicleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .addComponent(customersButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(vechicleDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(repairLogButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        adminPanelLayout.setVerticalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminPanelLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newVehicleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(repairLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vechicleDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vechicleDisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(logoutAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel7.add(adminPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, 350));

        customerInfo.setEditable(false);
        customerInfo.setColumns(20);
        customerInfo.setRows(5);
        jScrollPane2.setViewportView(customerInfo);

        searchCustButton.setText("Search");
        searchCustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(searchFieldCust, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCustButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFieldCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCustButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        adminPanelNav.addTab("tab1", jPanel9);

        jLabel13.setText("Owner (gmail)");

        jLabel14.setText("regPlate");

        jLabel15.setText("max passengers");

        jLabel16.setText("wheels");

        jLabel17.setText("Price ");

        priceOGField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceOGFieldActionPerformed(evt);
            }
        });

        registerVehicleButton.setText("Register Vehicle");
        registerVehicleButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        registerVehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerVehicleButtonActionPerformed(evt);
            }
        });

        vehicleTypeChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "car", "motorcyckle", "buss" }));
        vehicleTypeChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleTypeChoiceActionPerformed(evt);
            }
        });

        adressLabel.setText("adress");

        volumeLabel.setText("Trunk volume");

        kommunLabel.setText("kommun");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(37, 37, 37)
                        .addComponent(ownerField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(68, 68, 68)
                        .addComponent(regPlateField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(maxPassField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(77, 77, 77)
                        .addComponent(wheelsField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(84, 84, 84)
                        .addComponent(priceOGField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(vehicleTypeChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adressLabel)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(kommunLabel))
                            .addComponent(volumeLabel))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vehicleAdressField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kommunField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(volumeField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addComponent(registerVehicleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(ownerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel14))
                    .addComponent(regPlateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(maxPassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(wheelsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(priceOGField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(vehicleTypeChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(adressLabel)
                        .addGap(12, 12, 12)
                        .addComponent(kommunLabel)
                        .addGap(9, 9, 9)
                        .addComponent(volumeLabel))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(vehicleAdressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(kommunField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(volumeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(registerVehicleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        adminPanelNav.addTab("tab2", jPanel10);

        jLabel20.setText("Date");

        dateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldActionPerformed(evt);
            }
        });

        jLabel21.setText("owner (mail)");

        jLabel22.setText("reg-plate");

        jLabel23.setText("Description");

        descField.setColumns(20);
        descField.setRows(5);
        jScrollPane4.setViewportView(descField);

        jButton1.setText("Add logg");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel23)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel22))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateField)
                                    .addComponent(mailField)
                                    .addComponent(regplateField, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane4)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(mailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(regplateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(19, 19, 19))
        );

        adminPanelNav.addTab("tab3", jPanel11);

        vehicleField.setEditable(false);
        vehicleField.setColumns(20);
        vehicleField.setRows(5);
        jScrollPane3.setViewportView(vehicleField);

        vehicleSearchButton.setText("Search");
        vehicleSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(searchVehicleField, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(vehicleSearchButton))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchVehicleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vehicleSearchButton))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        adminPanelNav.addTab("tab4", jPanel4);

        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setText("RegPlate");
        jPanel8.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));
        jPanel8.add(regPlateNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 160, -1));

        submitButton.setText("Update Warranty");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        jPanel8.add(submitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 140, 40));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        adminPanelNav.addTab("tab5", jPanel6);

        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        reparationField.setEditable(false);
        reparationField.setColumns(20);
        reparationField.setRows(5);
        reparationField.setWrapStyleWord(true);
        jScrollPane8.setViewportView(reparationField);

        jPanel12.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 390, 200));

        jLabel25.setText("Search");
        jPanel12.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 9, -1, -1));
        jPanel12.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 6, 240, -1));

        jButton3.setText("Go");
        jPanel12.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 51, -1, -1));

        adminPanelNav.addTab("tab6", jPanel12);

        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel26.setText("Current Owner (mail)");
        jPanel13.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        jLabel27.setText("New Owner (mail)");
        jPanel13.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 100, -1));

        currentOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentOwnerActionPerformed(evt);
            }
        });
        jPanel13.add(currentOwner, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 170, -1));
        jPanel13.add(newOwner, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 170, -1));

        configure.setText("Configure new owner");
        configure.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        configure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configureActionPerformed(evt);
            }
        });
        jPanel13.add(configure, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, -1, 30));

        jLabel28.setText("regPlate");
        jPanel13.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, -1, -1));
        jPanel13.add(regPlateReplace, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, 170, -1));

        adminPanelNav.addTab("tab7", jPanel13);

        jPanel7.add(adminPanelNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 450, 320));

        mainPanelTab.addTab("tab4", jPanel7);

        getContentPane().add(mainPanelTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 8, 620, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void passwordLoginFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordLoginFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordLoginFieldActionPerformed

    private void emailLoginFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailLoginFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailLoginFieldActionPerformed

    private void noAccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noAccButtonActionPerformed
        // TODO add your handling code here:
        mainPanelTab.setSelectedIndex(1);
    }//GEN-LAST:event_noAccButtonActionPerformed

    private void signInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInButtonActionPerformed
        // bekräfterlse variabel
        boolean userFound = false;
        boolean adminFound = false;
        
        Kund currentCustomer = null;
        Kund customer = null;
        
        // input variabler
        String email = emailLoginField.getText();
        String password = String.valueOf(passwordLoginField.getPassword());
        // kunders data
        String userEmail = null;
        String userPassword = null;
        // bekräfta om det är en admin som logar in
        if (email.equals("-.$ecretAdmin.-")){
            adminFound = true;
        }
        
        // kolla om en eller fler av textfälten är tomma 
        if ((!userFound && !adminFound) && (email.isEmpty() || password.isEmpty())) {
            JOptionPane.showMessageDialog(null, "Please enter both email and password", "Input error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        // Om input inte är tomma eller relaterade till admin, jämför med kundernas inloggningsinformation
        if (!userFound && !adminFound) {
            try (FileReader fReader = new FileReader(KundFilePath);
                    BufferedReader br = new BufferedReader(fReader)) {

                String line;

                while ((line = br.readLine()) != null) {
                    if (line.startsWith("email: ")) {
                        userEmail = line.substring("email: ".length()).trim();
                    } else if (line.startsWith("password: ")) {
                        userPassword = line.substring("password: ".length()).trim();
                    }

                    if (userEmail != null && userPassword != null) {
                        // är inte null, bekräfta att detta är till rätt person
                        if (userEmail.equals(email) && userPassword.equals(password)) {
                            userFound = true;
                            break;
                        }
                    }
                }
            }catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        
        if (userFound || adminFound) {
            // Läs in alla kunder från textfilen
            try (FileReader fileReader = new FileReader(KundFilePath);
                    BufferedReader bufferedReader = new BufferedReader(fileReader)) {
                
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    if (line.startsWith("ID: ")) {
                        // Om en ny kund är hittad, skapa en ny objekt
                        customer = new Kund();
                        customer.setID(Integer.parseInt(line.substring(4)));
                    } else if (line.startsWith("name: ")) {
                        // splitta namnet i två delar; förnamn, efternamn
                        String[] nameParts = line.substring(6).split(" ");
                        customer.setFirstName(nameParts[0]);
                        customer.setLastName(nameParts[1]);
                    } else if (line.startsWith("password: ")) {
                        customer.setPassword(line.substring(10));
                    } else if (line.startsWith("email: ")) {
                        customer.setEmail(line.substring(7));
                    } else if (line.startsWith("adress: ")) {
                        customer.setAdress(line.substring(9));
                    } else if (line.startsWith("postal code: ")) {
                        customer.setPostNum(line.substring(13));
                    } else if (line.startsWith("telephone number: ")) {
                        customer.setTeleNum(line.substring(18));
                        // Skapa kunden och addera till listan
                        customers.add(customer);
                        // hitta den nuvarande inloggade kunden med att jämföra mail
                        if (email.equals(customer.getEmail())) {
                            currentCustomer = customer;
                        }
                    }
                }
                
            } catch (IOException e) {
                e.printStackTrace();
            }
            
            // admin loggar in
            if (adminFound){
                JOptionPane.showMessageDialog(null, "Welcome back Admin", "Admin Login", JOptionPane.INFORMATION_MESSAGE);
                
                // addera kundernas data till admins textruta
                for (Kund cust : customers) {
                    customerInfo.append(cust.toStringDisplay());
                }
               
                // rensa textfälten
                emailLoginField.setText("");
                passwordLoginField.setText("");

                // skicka till admin sidan
                mainPanelTab.setSelectedIndex(3);
                return;
            }
            
            // användare loggar in
            JOptionPane.showMessageDialog(null, "Login Successful", "Welcome", JOptionPane.INFORMATION_MESSAGE);
            
            ArrayList<String> regPlates = new ArrayList();
            
            // addera deras information till account tabben
            accountTextArea.append(currentCustomer.toString());
            
            try (BufferedReader br = new BufferedReader(new FileReader(FordonFilePath))) {
                String line;
                // Variabel för att bekräfta om fordonet tillhör den aktuella kunden
                boolean isCurrentCustomerVehicle = false;   
                String id = null;
                String idReg = null;
                // Lista för att lagra fordonsbyggare
                List<StringBuilder> vehicleBuilders = new ArrayList<>(); 

                while ((line = br.readLine()) != null) {
                    if (line.startsWith("ID:")) {
                        id = line + "\n";
                        idReg = line;
                    } else if (line.startsWith("Owner:")) {
                        // Hämta ägarens värde (e-post) för fordonet
                        String owner = line.substring(7).trim();
                        // Bekräfta att ägaren till fordonet är samma som inloggad användare
                        isCurrentCustomerVehicle = owner.equals(currentCustomer.getEmail());
                        if (isCurrentCustomerVehicle) {
                            // Skapa en ny fordonsbyggare för det aktuella fordonet
                            StringBuilder vehicleBuilder = new StringBuilder(); 
                            // ID tillhör användaren, lägg till det
                            regPlates.add(idReg);
                            vehicleBuilder.append(id);
                            vehicleBuilder.append(line).append("\n");
                            // Lägg till fordonsbyggaren i listan
                            vehicleBuilders.add(vehicleBuilder); 
                        }
                    } else if (!line.trim().isEmpty() && isCurrentCustomerVehicle) {
                        // Lägg till resterande information om fordonet som är relaterad till användaren
                        StringBuilder lastVehicleBuilder = vehicleBuilders.get(vehicleBuilders.size() - 1);
                        lastVehicleBuilder.append(line).append("\n");
                    }
                }

                // Lägg till varje fordonsbyggare i userVehiclesField
                for (StringBuilder vehicleBuilder : vehicleBuilders) {
                    userVehiclesField.append(vehicleBuilder.toString());
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            
            for (String regPlate : regPlates) {
                // Find the vehicle with the matching registration plate
                Fordon foundVehicle = null;
                for (Fordon vehicle : currentCustomer.getVehicles()) {
                    if (vehicle.getregPlate().equals(regPlate)) {
                        foundVehicle = vehicle;
                        break;
                    }
                }
                
                // skapa arrayList med alla reparation
                List<Reparation> reparationsList = new ArrayList<>();
                String reg = null;
                try (BufferedReader br = new BufferedReader(new FileReader(RepFilePath))) {
                    String line;
                    int reparationID = 0;
                    Date date = null;
                    String description = null;
                    String customerID = null;
                    String dateString = null;

                    // addera raparationshistorik till userRepairField eller reparationField
                    while ((line = br.readLine()) != null) {
                        if (line.startsWith("ReparationsID:")) {
                            reparationID = Integer.parseInt(line.substring(line.indexOf(":") + 1).trim());
                        } else if (line.startsWith("RegPlate:")) {
                            reg = line.substring(line.indexOf(":") + 1).trim();
                        } else if (line.startsWith("Date:")) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                            dateString = line.substring(line.indexOf(":") + 1).trim();
                            date = dateFormat.parse(dateString);
                        } else if (line.startsWith("Description:")) {
                            description = line.substring(line.indexOf(":") + 1).trim();
                        } else if (line.startsWith("customer:")) {
                            customerID = line.substring(line.indexOf(":") + 1).trim();
                            if (customerID.equals(currentCustomer.getEmail())){
                                userRepairField.append(String.valueOf(reparationID) + "\n");
                                userRepairField.append(reg + "\n");
                                userRepairField.append(dateString + "\n");
                                userRepairField.append(String.valueOf(description + "\n"));
                                userRepairField.append(customerID + "\n\n");
                            }
                        } 
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (ParseException e) {
                    e.printStackTrace();
                }

               
            }
            // rensa textfälten 
            emailLoginField.setText("");
            passwordLoginField.setText("");
            
            mainPanelTab.setSelectedIndex(2);
        } else {
            // Anändaren hittades inte eller fel inmatning
            JOptionPane.showMessageDialog(null, "Invalid email or password", "Sign in error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_signInButtonActionPerformed

    private void teleNumFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teleNumFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teleNumFieldActionPerformed

    private void postNumFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postNumFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_postNumFieldActionPerformed

    private void adressFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adressFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adressFieldActionPerformed

    private void lastNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameFieldActionPerformed

    private void firstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameFieldActionPerformed

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailFieldActionPerformed

    private void regButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regButtonActionPerformed
        boolean success = false;

        // kolla om all information är given
        String firstName = firstNameField.getText();
        String lastName = lastNameField.getText();
        String adress = adressField.getText();
        String postNum = postNumField.getText();
        String teleNum = teleNumField.getText();
        String email = emailField.getText();
        String password = String.valueOf(passwordField.getPassword());
        
        ArrayList<JTextField> regData = new ArrayList<JTextField>(Arrays.asList(firstNameField, lastNameField, adressField, postNumField, teleNumField, emailField, passwordField));
        
        // iterera genom listan och bekräfta inmatningar
        for (JTextField data : regData){
            // tomma inmatningar
            if (data == null || data.getText().isBlank()){
                success = false;
                break;
            }
            
            // Validera alla inmatningar
            if ((data == firstNameField || data == lastNameField) && (data.getText().length() < 1 || data.getText().length() > 24 || !containsOnlyLetters(data.getText()))) {
                success = false;
                break;
            } else if ((data == adressField) && (data.getText().length() > 85 || !onlyLettersAndNumbers(data.getText()))) {
                success = false;
                break;
            } else if ((data == postNumField) && (!data.getText().matches("\\d{5}") || containsLetters(data.getText()))) {
                success = false;
                break;
            } else if ((data == teleNumField) && (!data.getText().matches("\\d{10}") || containsLetters(data.getText()))) {
                JOptionPane.showMessageDialog(null, "Telefone number should be 10 numbers", "Input error", JOptionPane.ERROR_MESSAGE);
                success = false;
                break;
            } else if ((data == emailField) && !validateEmail(data.getText(), 0)){
                JOptionPane.showMessageDialog(null, "Invalid format or mail already exists", "Error", JOptionPane.ERROR_MESSAGE);
                success = false;
                break;
            } else if (data == passwordField && password.length() < 8){
                JOptionPane.showMessageDialog(null,"Password minimum 8 characters", "Input error", JOptionPane.ERROR_MESSAGE);
                success = false; 
                break;
            } else {
                // Om alla procedur är godkända så är success = true
                success = true;
            }
        }
        
        if (success == false){
            JOptionPane.showMessageDialog(null, "Invalid input, please enter all fields correctly");
            return;
        } 
        if (success == true){
            int ID = rand.nextInt(1000);
            
            // Verifiering av kundens ID 
            // skapa reader och writer till kundfilen
            FileWriter fWriter = null;
            try (FileReader fReader = new FileReader(KundFilePath)){
                fWriter = new FileWriter(KundFilePath, true);
                BufferedReader br = new BufferedReader(fReader);
                String line;
                while ((line = br.readLine()) != null) {
                    while (line.startsWith("ID:") && Integer.parseInt(line.substring("ID:".length()).trim()) == ID){
                        // uppdatera ID
                        ID = rand.nextInt(1000);
                    }
                }
                // Skapa Kund
                Kund kund = new Kund(ID, firstName, lastName, adress, postNum, teleNum, email, password);
                fWriter.append(kund.toString()).append(System.lineSeparator());
                fWriter.close();
                fReader.close();
            } catch (IOException i) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, i);
            }
           
            // Rensa alla textrutor
            for (JTextField data : regData){
                data.setText("");
            }
            // skicka användaren tillbaka till login
            JOptionPane.showMessageDialog(null, "User registered");
            mainPanelTab.setSelectedIndex(0);
        }
    }//GEN-LAST:event_regButtonActionPerformed

    private void cancelRegButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRegButtonActionPerformed
        mainPanelTab.setSelectedIndex(0);
    }//GEN-LAST:event_cancelRegButtonActionPerformed

    private void emailField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailField1ActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void myRepairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myRepairButtonActionPerformed
        homeTabNav.setSelectedIndex(2);
    }//GEN-LAST:event_myRepairButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // verifiera att användare vill logga ut med enn val - ja eller nej
        int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Logout Confirmation", JOptionPane.YES_NO_OPTION);
        // användaren valde att logga ut
        if (choice == JOptionPane.YES_OPTION) {
            // loggar ut och rensar data
            customerInfo.setText("");
            accountTextArea.setText("");
            customers.clear();
            mainPanelTab.setSelectedIndex(0);
            JOptionPane.showMessageDialog(null, "Logout successful", "Logout", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void logoutAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutAdminButtonActionPerformed
        // verifiera att användare vill logga ut med enn val - ja eller nej
        int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Logout Confirmation", JOptionPane.YES_NO_OPTION);

        // användaren valde att logga ut
        if (choice == JOptionPane.YES_OPTION) {
            // loggar ut och rensar data
            customerInfo.setText("");
            accountTextArea.setText("");
            customers.clear();
            mainPanelTab.setSelectedIndex(0);
            JOptionPane.showMessageDialog(null, "Logout successful", "Logout", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_logoutAdminButtonActionPerformed

    private void customersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersButtonActionPerformed
        adminPanelNav.setSelectedIndex(0);
    }//GEN-LAST:event_customersButtonActionPerformed

    private void newVehicleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newVehicleButtonActionPerformed
        adminPanelNav.setSelectedIndex(1);
        
        vehicleAdressField.setEnabled(true);
        vehicleAdressField.setVisible(true);
        adressLabel.setVisible(true);

        volumeField.setEnabled(true);
        volumeField.setVisible(true);
        volumeLabel.setVisible(true);

        kommunField.setEnabled(false);
        kommunField.setVisible(false);
        kommunLabel.setVisible(false);
    }//GEN-LAST:event_newVehicleButtonActionPerformed

    private void repairLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repairLogButtonActionPerformed
        adminPanelNav.setSelectedIndex(2);
    }//GEN-LAST:event_repairLogButtonActionPerformed

    private void accountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountButtonActionPerformed
        homeTabNav.setSelectedIndex(0);
    }//GEN-LAST:event_accountButtonActionPerformed

    private void myVechicleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myVechicleButtonActionPerformed
        homeTabNav.setSelectedIndex(1);
    }//GEN-LAST:event_myVechicleButtonActionPerformed

    private void searchCustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustButtonActionPerformed
        // hämta input från textefield om det är tom eller inte
        String text = searchFieldCust.getText();
        if (text.isBlank()){
            int choice = JOptionPane.showConfirmDialog(null, "No input, do you want to refresh cusotmer list?", "refresh Confirmation", JOptionPane.YES_NO_OPTION);

            // användaren valde refresha
            if (choice == JOptionPane.YES_OPTION) {
                // uppdaterar text arean
                customerInfo.setText("");
                
                // addera kundernas data igen till admins textruta
                for (Kund cust : customers) {
                    customerInfo.append(cust.toStringDisplay());
                }

                JOptionPane.showMessageDialog(null, "refresh successful");
            }
        } else if (!validateEmail(text, 1)){
            // mailen finns inte
            JOptionPane.showMessageDialog(adminPanelNav, "email does not exist, or invalid input");
        } else if (validateEmail(text, 1)){
            // mailen finns, visa bara denna användares information
            
            // börja med rensa textfältet innan addering
            customerInfo.setText("");
            
            Kund currentCustomer = new Kund();
            // hämta användaren information utifrån email
            currentCustomer = currentCustomer.getCustomerByEmail(text, customers);
            customerInfo.append(currentCustomer.toString());
        }
    }//GEN-LAST:event_searchCustButtonActionPerformed

    private void vechicleDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vechicleDisplayActionPerformed
        adminPanelNav.setSelectedIndex(3);   
        
        if (vehicleField.getText().isBlank()){
            // fordonen finns inte i textruntan printa dem
            
            try (BufferedReader br = new BufferedReader(new FileReader(FordonFilePath))) {
                StringBuilder vehicleBuilder = new StringBuilder();
                String line;

                while ((line = br.readLine()) != null) {
                    if (line.startsWith("ID:")) {
                        // Början på fordonets informationsbeskrivning
                        vehicleBuilder.append(line).append("\n");
                    } else if (!line.trim().isEmpty()) {
                        // addera information
                        vehicleBuilder.append(line).append("\n");
                    } else {
                        // Slutet på fordonets info, addera en sepparator
                        vehicleBuilder.append("------------------------").append("\n");
                    }
                }

                // skriv ut fordonens information till textarean
                vehicleField.setText(vehicleBuilder.toString());
                // uppdatera variablen 
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_vechicleDisplayActionPerformed

    private void registerVehicleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerVehicleButtonActionPerformed
        // kolla om all information är given
        String regPlate = regPlateField.getText();
        String maxPass = maxPassField.getText();
        String wheels = wheelsField.getText();
        String priceOG = priceOGField.getText();
        String vehicleChoice = vehicleTypeChoice.getSelectedItem().toString();
        String email = ownerField.getText();
        Calendar date = Calendar.getInstance();
        Kund cust = new Kund();
        if (validateEmail(email, 1)) cust = cust.getCustomerByEmail(email, customers);
        else{
            JOptionPane.showMessageDialog(null, "mail does not exist");
            return;
        }
        
        ArrayList<JTextField> regVehicleData = new ArrayList<>(Arrays.asList(regPlateField, maxPassField, priceOGField, ownerField));
        
        // bekräfta att antalet hjul och antal passagerare är en string
        try {
            Integer.parseInt(wheels);
            Integer.parseInt(maxPass);
            Float.parseFloat(priceOG);
            if (vehicleChoice.equals("car")) {
                Float.parseFloat(volumeField.getText());
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Can't have a string on measurement parameters");
            return;
        }
        
        // hantera inmatad data
        for(JTextField data : regVehicleData){
            // kolla om textrutan är tom
            if (data.getText().trim().isEmpty()){
                JOptionPane.showMessageDialog(null, "please input all fields");
                System.out.println("data: " + data.getText());
                System.out.println("da  ta2: " + data.getName());
                return;
            }
        }
        
        // bekräfta att regplåten inte redan finns
        if (validateRegPlate(regPlate)){
            // fordonet finns
            JOptionPane.showMessageDialog(null, "Vehicle already exists");
            return;
        }
        
        // skapa filewriter
        FileWriter vWriter = null;
        try {
            vWriter = new FileWriter(FordonFilePath, true);
        } catch (IOException i) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, i);
        }
        
        // hantera data för speifik fordonstyp
        switch (vehicleChoice) {
            case "car" ->                 {
                    String vehicleAdress = vehicleAdressField.getText();
                    String volume = volumeField.getText();
                    // kolla om all information är given för bil
                    if (volume.isBlank()) {
                        JOptionPane.showMessageDialog(null, "please input volume car field");
                        return;
                    }        
                    // skapa fordonet
                    if (vehicleAdress.isBlank()) {
                        vehicleAdress = cust.getAdress();
                        // kundens adress
                        PersonBil car = new PersonBil(regPlate, cust, Integer.parseInt(maxPass), Integer.parseInt(wheels), date, Float.parseFloat(priceOG), Float.parseFloat(priceOG), vehicleAdress, Float.parseFloat(volumeField.getText()));
                        PersonBil fordon = car;
                        // addera till filen
                        try {
                            // addera till filen    
                            vWriter.append(fordon.toString() + "type: " + vehicleChoice + "\n");
                            vWriter.close();
                            JOptionPane.showMessageDialog(null, "register successful");
                            clearAdmin();
                            return;
                        } catch (IOException ex) {
                            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        // input adress
                        PersonBil car = new PersonBil(regPlate, cust, Integer.parseInt(maxPass), Integer.parseInt(wheels), date, Float.parseFloat(priceOG), Float.parseFloat(priceOG), vehicleAdressField.getText(), Float.parseFloat(volumeField.getText()));
                        PersonBil fordon = car;
                        try {
                            // addera till filen
                            vWriter.append(fordon.toString() + "type: " + vehicleChoice + "\n");
                            vWriter.close();
                            JOptionPane.showMessageDialog(null, "register successful");
                            clearAdmin();
                            return;
                        } catch (IOException ex) {
                            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } 
                    return;
                }
            case "motorcyckle" ->                 {
                    String vehicleAdress = vehicleAdressField.getText();
                    // kolla om all information är given för motorcykel
                    if (vehicleAdress.isBlank()) {
                        vehicleAdress = cust.getAdress();
                        // kundens adress
                        Motorcyckel cyckel = new Motorcyckel(regPlate, cust, Integer.parseInt(maxPass), Integer.parseInt(wheels), date, Float.parseFloat(priceOG), Float.parseFloat(priceOG), vehicleAdress);
                        Motorcyckel fordon = cyckel;
                        try {
                            // addera till filen
                            vWriter.append(fordon.toString() + "type: " + vehicleChoice + "\n");
                            vWriter.close();
                            JOptionPane.showMessageDialog(null, "register successful");
                            clearAdmin();
                            return;
                        } catch (IOException ex) {
                            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        // input adress
                        Motorcyckel cyckel = new Motorcyckel(regPlate, cust, Integer.parseInt(maxPass), Integer.parseInt(wheels), date, Float.parseFloat(priceOG), Float.parseFloat(priceOG), vehicleAdressField.getText());
                        Motorcyckel fordon = cyckel;
                        try {
                            // addera till filen
                            vWriter.append(fordon.toString() + "type: " + vehicleChoice + "\n");
                            vWriter.close();
                            JOptionPane.showMessageDialog(null, "register successful");
                            clearAdmin();
                            return;
                        } catch (IOException ex) {
                            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    return;
                }
            case "buss" -> {
                String kommun = kommunField.getText();
                // kolla om all information är given för buss
                if (kommun.isBlank()) {
                    JOptionPane.showMessageDialog(null, "please input all bus fields");
                    return;
                } else {
                    // inga error, addera bussen
                    Buss bus = new Buss(regPlate, cust, Integer.parseInt(maxPass), Integer.parseInt(wheels), date, Float.parseFloat(priceOG), Float.parseFloat(priceOG), kommun);
                    Buss fordon = bus;
                    try {
                        // addera till filen
                        vWriter.append(fordon.toString() + "type: " + vehicleChoice + "\n");
                        vWriter.close();
                        JOptionPane.showMessageDialog(null, "register successful");
                        clearAdmin();
                        return;
                    } catch (IOException ex) {
                        Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                return;
            }
            default -> {
            }
        }
    }//GEN-LAST:event_registerVehicleButtonActionPerformed

    private void vehicleTypeChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicleTypeChoiceActionPerformed
        String vehicleChoice = vehicleTypeChoice.getSelectedItem().toString();
        
        // göm information baserat på fordonsval
        switch (vehicleChoice) {
            case "car" -> {
                vehicleAdressField.setEnabled(true);
                vehicleAdressField.setVisible(true);
                adressLabel.setVisible(true);
                
                volumeField.setEnabled(true);
                volumeField.setVisible(true);
                volumeLabel.setVisible(true);
                
                kommunField.setEnabled(false);
                kommunField.setVisible(false);
                kommunLabel.setVisible(false);
            }
            case "motorcyckle" -> {
                vehicleAdressField.setEnabled(true);
                vehicleAdressField.setVisible(true);
                adressLabel.setVisible(true);
                
                volumeField.setEnabled(false);
                volumeField.setVisible(false);
                volumeLabel.setVisible(false);
                
                kommunField.setEnabled(false);
                kommunField.setVisible(false);
                kommunLabel.setVisible(false);
            }
            case "buss" -> {
                vehicleAdressField.setEnabled(false);
                vehicleAdressField.setVisible(false);
                adressLabel.setVisible(false);
                
                volumeField.setEnabled(false);
                volumeField.setVisible(false);
                volumeLabel.setVisible(false);
                
                kommunField.setEnabled(true);
                kommunField.setVisible(true);
                kommunLabel.setVisible(true);
            }
            default -> {
            }
        }
    }//GEN-LAST:event_vehicleTypeChoiceActionPerformed

    private void dateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldActionPerformed

    private void priceOGFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceOGFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceOGFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String regPlate = regplateField.getText();
        String dateText = dateField.getText();
        String owner = mailField.getText();
        String desc = descField.getText();
        Date date = validateDate(dateText);
        
        // hantera datum fältet
        if(date == null || dateField.getText().isBlank()){
            // inte ett datum 
            JOptionPane.showMessageDialog(null, "wrong date format, try again (yyyy-MM-dd)");
            return;
        } 
        if (!validateEmail(owner, 1) || mailField.getText().isBlank()){
            // fel mejl eller finns inte
            JOptionPane.showMessageDialog(null, "mail dose not exist");
            return;
        } 
        if (!validateRegPlate(regPlate) || regplateField.getText().isBlank()){
            // reg-nummer finns inte
            JOptionPane.showMessageDialog(null, "reg-number does not exist");
            return;
        } 
        if (desc.trim().isEmpty()){
            // måste finnas en beskrivning för loggen
            JOptionPane.showMessageDialog(null, "Description is Neccesary");
            return;
        }
        
        // all information är giltig, skapa fileWriter
        FileWriter repWriter = null;
        try {
            repWriter = new FileWriter(RepFilePath, true);
        } catch (IOException i) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, i);
        }
        
        // yttligare relevant information
        int reparationsID = rand.nextInt(2000);
        Kund cust = new Kund();
        cust = cust.getCustomerByEmail(owner, customers);
        
        // valider att emailen och regnummer stämmer överrens med fordon ID och ägare
        boolean matchFound = false;
        boolean idMatch = false;
        boolean ownerMatch = false;
        try (BufferedReader br = new BufferedReader(new FileReader(FordonFilePath))) {
            String line;
            String id;
            String vehicleOwner;

            while ((line = br.readLine()) != null) {
                if (line.startsWith("ID:")) {
                    id = line.substring(4).trim();
                    idMatch = id.equals(regPlate);
                } else if (line.startsWith("Owner:")) {
                    vehicleOwner = line.substring(7).trim();
                    ownerMatch = vehicleOwner.equals(owner);
                }

                // titta om idn och ägaren matchar fordonets
                if (idMatch && ownerMatch) {
                    matchFound = true;
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (!matchFound) {
            JOptionPane.showMessageDialog(null, "Invalid regPlate or email");
            return;
        }
        
        // skapa object och addera information till filen
        Reparation rep = new Reparation(reparationsID, regPlate, date, desc, cust.getEmail());
        try {
            repWriter.append(rep.toString());
            repWriter.close();
            JOptionPane.showMessageDialog(null, "Logg successfully added");
            // refresha inmatad data
            regplateField.setText("");
            dateField.setText("");
            mailField.setText("");
            descField.setText("");
        } catch (IOException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void vehicleSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicleSearchButtonActionPerformed
        String searchInput = searchVehicleField.getText();

        if (searchInput.trim().isEmpty()) {
            // Inget inmatat
            int choice = JOptionPane.showConfirmDialog(null, "No input, do you want to clear vehicle text area?", "refresh Confirmation", JOptionPane.YES_NO_OPTION);

            // användaren valde refresha
            if (choice == JOptionPane.YES_OPTION) {
                vehicleField.setText("");
            }
            return;
        }

        StringBuilder vehicleBuilder = new StringBuilder();
        boolean found = false;

        try (BufferedReader br = new BufferedReader(new FileReader(FordonFilePath))) {
            String line;
            boolean isSearching = false;

            while ((line = br.readLine()) != null) {
                if (line.startsWith("ID:") && line.contains(searchInput)) {
                    // Start på en fordonssektion som matchar sökningen
                    vehicleBuilder.append(line).append("\n");
                    isSearching = true;
                    found = true;
                } else if (isSearching && (!line.trim().isEmpty() && !line.startsWith("-")) ) {
                    // Lägg till andra detaljer inom fordonssektionen
                    vehicleBuilder.append(line).append("\n");
                } else if (isSearching) {
                    // Slut på fordonssektionen, avsluta sökningen
                    isSearching = false;
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "No vehicle found with the provided ID or regPlate");
        } else {
            // Visa det/de hittade fordonen
            vehicleField.setText(vehicleBuilder.toString());
        }
    }//GEN-LAST:event_vehicleSearchButtonActionPerformed

    private void vechicleDisplay1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vechicleDisplay1ActionPerformed
        adminPanelNav.setSelectedIndex(4);
    }//GEN-LAST:event_vechicleDisplay1ActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String regPlate = regPlateNameField.getText();
        String lineToReplace = "Remaining Warranty (years): ";

        // validera regplate 
        if (regPlate.isBlank()) {
            JOptionPane.showMessageDialog(null, "Please input the registration plate first");
            return;
        }

        if (!validateRegPlate(regPlate)) {
            JOptionPane.showMessageDialog(null, "Invalid registration plate");
            return;
        }

        String line = null;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(FordonFilePath));
            StringBuilder updatedContent = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(lineToReplace)) {
                    float warrantyPeriod = 0;
                    try {
                        // hämta garantitid i float
                        String warrantyValueStr = line.substring(lineToReplace.length()).trim();
                        warrantyPeriod = Float.parseFloat(warrantyValueStr);
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid warranty value: " + line);
                        e.printStackTrace();
                    }
                    
                    // nya garantitiden
                    float newWarrantyPeriod = warrantyPeriod - 1;
                    
                    if (newWarrantyPeriod < 0) {
                        newWarrantyPeriod = 0;
                    }

                    String warrantyPeriodStr = "Remaining Warranty (years): " + newWarrantyPeriod;
                    String newValue;
                    float value;
                    String purchasePriceStr;
                    // uppdatera priset beroende på garantitid
                    if (newWarrantyPeriod == 0) {
                        purchasePriceStr = reader.readLine();
                        float purchasePrice = Float.parseFloat(purchasePriceStr.replaceAll("Original Price:", ""));
                        reader.readLine();
                        value = (float) (purchasePrice * 0.2);
                        newValue = "Current Price:" + value;
                    } else {
                        purchasePriceStr = reader.readLine();
                        value = Float.parseFloat(reader.readLine().replaceAll("Current Price:", ""));
                        newValue = "Current Price:" + (value * 0.9);
                    }
                    updatedContent.append(warrantyPeriodStr).append("\n").append(purchasePriceStr).append("\n").append(newValue).append("\n");
                } else {
                    updatedContent.append(line).append("\n");
                }
            }
            reader.close();
            // Skriv in informationen till text filen
            Files.write(Path.of(FordonFilePath), updatedContent.toString().getBytes());
            JOptionPane.showMessageDialog(null, "successfully updated warranty");
        } catch (IOException e5) {
            JOptionPane.showMessageDialog(this, "An error occurred while writing to the file, please try again", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_submitButtonActionPerformed
    
    public String getWarranty(String warranty, String regPlate){
        try (BufferedReader br = new BufferedReader(new FileReader(FordonFilePath))) {
            String line;

            while ((line = br.readLine()) != null) {
                if (line.startsWith("ID: " + regPlate)) {
                    // Hittade fordon, spara garantitiden
                    while ((line = br.readLine()) != null) {
                        if (line.startsWith("Remaining Warranty (years): ")) {
                            warranty = line.substring(line.indexOf(": ") + 2);
                            break;
                        }
                    }
                    break;
                }
            }
            return warranty;
        } catch (IOException e) {
            e.printStackTrace();
        }
        // hittades inte
        return "";
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        adminPanelNav.setSelectedIndex(6);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void currentOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentOwnerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentOwnerActionPerformed

    private void configureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configureActionPerformed
        // inmatad data från textfilerna
        String oldOwner = currentOwner.getText();
        String replacerOwner = newOwner.getText();
        String regPlate = regPlateReplace.getText();
        
        // kolla om det är tomma
        if (oldOwner.isBlank() || replacerOwner.isBlank() || regPlate.isBlank()) {
            JOptionPane.showMessageDialog(null, "please enter all fields");
            return;
        }   
        // validera
        if (!validateEmail(oldOwner, 1) || !validateEmail(replacerOwner, 1)) {
            JOptionPane.showMessageDialog(null, "Please make sure that both of the owners exist");
            return;
        }
        if (!validateRegPlate(regPlate)) {
            JOptionPane.showMessageDialog(null, "regPlate does not exist");
        }
        
        // byt ägare
        try (RandomAccessFile file = new RandomAccessFile(FordonFilePath, "rw")) {

            String line;
            boolean relevantSection = false;

            while ((line = file.readLine()) != null) {
                if (line.startsWith("ID:") && line.contains(regPlate)) {
                    long filePointer = file.getFilePointer();
                    String ownerLine = file.readLine();

                    if (ownerLine.startsWith("Owner:") && ownerLine.contains(oldOwner)) {
                        // Läs in hela filen tll en lista
                        List<String> fileContent = new ArrayList<>(Files.readAllLines(Path.of(FordonFilePath), StandardCharsets.UTF_8));

                        
                        for (int i = 0; i < fileContent.size(); i++) {
                            //kolla att det är rätt fordon
                            if(fileContent.get(i).equals(line)){
                                relevantSection = true;
                            }
                            if(relevantSection && fileContent.get(i).equals(ownerLine)){
                                fileContent.set(i, "Owner: " + replacerOwner);
                                break;
                            }
                        }

                        Files.write(Path.of(FordonFilePath), fileContent, StandardCharsets.UTF_8);
                        JOptionPane.showMessageDialog(null, "success");
                        currentOwner.setText("");
                        newOwner.setText("");
                        regPlateReplace.setText("");
                        return;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_configureActionPerformed

    // METODER FÖR VALIDERING AV DATA
    
    // kolla om det innehåller bokstäver
    public boolean containsLetters(String input) {
        return input.matches(".*[a-zA-Z].*");
    }

    // kollar om det BARA innehåller bokstäver
    public boolean containsOnlyLetters(String input) {
        return input.matches("[a-zA-Z]+");
    }
    
    // kollar om det BARA innehålelr bokstäver och siffror
    public boolean onlyLettersAndNumbers(String input) {
        return input.matches("[a-zA-Z0-9]+");
    }
    
    // validerar mejlet, där parameter id antingen 1 eller 0 för search resp. regestrering email
    public boolean validateEmail(String email, int id) { 
        if (email == null || email.isEmpty()) {
            return false;
        }
        // Hantera mailens format med regex
        String emailRegex = "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$";
        Pattern pattern = Pattern.compile(emailRegex);
        // kontrollera att mailen stämmer
        if (pattern.matcher(email).matches()) {
            // reader
            try (FileReader fReader = new FileReader(KundFilePath)) {
                // Verifiera om mejlen finns
                BufferedReader br = new BufferedReader(fReader);
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.startsWith("email:") && line.substring(7).trim().equalsIgnoreCase(email.trim())) {
                        // mäilen finns redan (inte unik)
                        if (id == 0) return false;          // reg email
                        else if (id == 1) return true;      // sök email
                    }
                }
                br.close();
                // mailen finns inte (är unik)
                if (id == 0) return true;           // reg email
                else if (id == 1) return false;     // sök email
                
            } catch (IOException e) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(null, "Something went wrong");
                mainPanelTab.setSelectedIndex(0);
            }
        }
        // formatfel, följer inte mail-standard regex 
        return false;
    }
    
    // validerar regplåten, kollar om regplåten finns eller inte
    public boolean validateRegPlate(String regPlate){
        // bekräfta att regplåten inte redan finns
        try (BufferedReader br = new BufferedReader(new FileReader(FordonFilePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.contains("ID: " + regPlate)) {
                    // reg-plåten hittat i filen
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        // hittades inte i filen 
        return false;
    }
    
    // validering av datumet 
    public Date validateDate(String date){
        // formatter
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);  

        // testa returnera parsed datum, om det inte gick; returnera null
        try {
            Date dateReal = dateFormat.parse(date);
            return dateReal;
        } catch (ParseException e) {
            return null;
        }
    }
    // SLUTET PÅ VALIDERINGS METODER
    
    // refreshar admin fields (textfält som finns i admins ruta)
    public void clearAdmin(){
        vehicleAdressField.setText("");
        volumeField.setText("");
        kommunField.setText("");
        ownerField.setText("");
        vehicleTypeChoice.setSelectedItem("");
        priceOGField.setText("");
        wheelsField.setText("");
        maxPassField.setText("");
        regPlateField.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accountButton;
    private javax.swing.JTextArea accountTextArea;
    private javax.swing.JPanel acountTab;
    private javax.swing.JPanel adminPanel;
    private javax.swing.JTabbedPane adminPanelNav;
    private javax.swing.JTextField adressField;
    private javax.swing.JLabel adressLabel;
    private javax.swing.JButton cancelRegButton;
    private javax.swing.JButton configure;
    private javax.swing.JTextField currentOwner;
    private javax.swing.JTextArea customerInfo;
    private javax.swing.JButton customersButton;
    private javax.swing.JTextField dateField;
    private javax.swing.JTextArea descField;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField emailField1;
    private javax.swing.JTextField emailLoginField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JPanel homePanel;
    private javax.swing.JTabbedPane homeTabNav;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField kommunField;
    private javax.swing.JLabel kommunLabel;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JButton logoutAdminButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTextField mailField;
    private javax.swing.JTabbedPane mainPanelTab;
    private javax.swing.JTextField maxPassField;
    private javax.swing.JButton myRepairButton;
    private javax.swing.JPanel myRepairTab;
    private javax.swing.JButton myVechicleButton;
    private javax.swing.JPanel myVehicleTab;
    private javax.swing.JTextField newOwner;
    private javax.swing.JButton newVehicleButton;
    private javax.swing.JButton noAccButton;
    private javax.swing.JTextField ownerField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPasswordField passwordLoginField;
    private javax.swing.JTextField postNumField;
    private javax.swing.JTextField priceOGField;
    private javax.swing.JButton regButton;
    private javax.swing.JTextField regPlateField;
    private javax.swing.JTextField regPlateNameField;
    private javax.swing.JTextField regPlateReplace;
    private javax.swing.JPanel regUserPanel;
    private javax.swing.JButton registerVehicleButton;
    private javax.swing.JTextField regplateField;
    private javax.swing.JButton repairLogButton;
    private javax.swing.JTextArea reparationField;
    private javax.swing.JButton searchCustButton;
    private javax.swing.JTextField searchFieldCust;
    private javax.swing.JTextField searchVehicleField;
    private javax.swing.JButton signInButton;
    private javax.swing.JPanel signInPanel;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField teleNumField;
    private javax.swing.JTextArea userRepairField;
    private javax.swing.JTextArea userVehiclesField;
    private javax.swing.JButton vechicleDisplay;
    private javax.swing.JButton vechicleDisplay1;
    private javax.swing.JTextField vehicleAdressField;
    private javax.swing.JTextArea vehicleField;
    private javax.swing.JButton vehicleSearchButton;
    private javax.swing.JComboBox<String> vehicleTypeChoice;
    private javax.swing.JTextField volumeField;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JTextField wheelsField;
    // End of variables declaration//GEN-END:variables
}
